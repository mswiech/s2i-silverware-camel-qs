<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

   <modelVersion>4.0.0</modelVersion>

   <groupId>io.silverware.devconf</groupId>
   <artifactId>s2i-silverware-camel-qs</artifactId>
   <version>1.0</version>
   <packaging>jar</packaging>

   <properties>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <java.level>1.8</java.level>

      <version.fabric8>2.2.0.redhat-079</version.fabric8>
      <version.apache.camel>2.14.1</version.apache.camel>
      <version.commons.lang3>3.4</version.commons.lang3>
      <version.maven.clean>2.5</version.maven.clean>
      <version.maven.compiler>3.3</version.maven.compiler>
      <version.maven.surefire>2.18.1</version.maven.surefire>
      <version.maven.findbugs>3.0.0</version.maven.findbugs>
      <version.maven.project.reports>2.7</version.maven.project.reports>
      <version.maven.jar.plugin>2.4</version.maven.jar.plugin>
      <version.maven.dependency.plugin>2.8</version.maven.dependency.plugin>
      <version.maven.jolokia.docker.plugin>0.13.6</version.maven.jolokia.docker.plugin>

      <!-- Docker & Fabric8 Configs -->
      <docker.from>registry.access.redhat.com/jboss-fuse-6/fis-java-openshift:1.0</docker.from>
      <fabric8.dockerUser>${oc.project}/</fabric8.dockerUser>
      <docker.image.simple>${fabric8.dockerUser}${project.artifactId}:${project.version}</docker.image.simple>
      <docker.port.container.jolokia>8778</docker.port.container.jolokia>

      <fabric8.label.component>${project.artifactId}</fabric8.label.component>
      <fabric8.label.container>java</fabric8.label.container>
      <fabric8.label.group>quickstarts</fabric8.label.group>
      <fabric8.iconRef>camel</fabric8.iconRef>
   </properties>

   <dependencyManagement>
      <dependencies>
         <dependency>
            <groupId>io.silverware</groupId>
            <artifactId>microservices-bom</artifactId>
            <version>${project.version}</version>
            <type>pom</type>
            <scope>import</scope>
         </dependency>
         <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-stream</artifactId>
            <version>${version.apache.camel}</version>
         </dependency>
      </dependencies>
   </dependencyManagement>

   <dependencies>
      <dependency>
         <groupId>io.silverware</groupId>
         <artifactId>microservices</artifactId>
      </dependency>
      <dependency>
         <groupId>io.silverware</groupId>
         <artifactId>camel-microservice-provider</artifactId>
      </dependency>
      <dependency>
         <groupId>org.apache.camel</groupId>
         <artifactId>camel-stream</artifactId>
      </dependency>
      <dependency>
         <groupId>org.apache.commons</groupId>
         <artifactId>commons-lang3</artifactId>
         <version>${version.commons.lang3}</version>
      </dependency>
   </dependencies>

   <build>
      <defaultGoal>install</defaultGoal>

      <pluginManagement>
         <plugins>
            <plugin>
               <artifactId>maven-compiler-plugin</artifactId>
               <version>${version.maven.compiler}</version>
               <configuration>
                  <source>${java.level}</source>
                  <target>${java.level}</target>
               </configuration>
            </plugin>
            <plugin>
               <groupId>org.codehaus.mojo</groupId>
               <artifactId>exec-maven-plugin</artifactId>
               <version>1.4.0</version>
               <executions>
                  <execution>
                     <goals>
                        <goal>java</goal>
                     </goals>
                  </execution>
               </executions>
               <configuration>
                  <mainClass>io.silverware.microservices.Boot</mainClass>
               </configuration>
            </plugin>
            <plugin>
               <groupId>org.apache.maven.plugins</groupId>
               <artifactId>maven-clean-plugin</artifactId>
               <version>${version.maven.clean}</version>
               <configuration>
                  <filesets>
                     <fileset>
                        <directory>${basedir}</directory>
                        <includes>
                           <include>logs</include>
                           <include>*.log*</include>
                           <include>dependency-reduced-pom.xml</include>
                        </includes>
                        <followSymlinks>false</followSymlinks>
                     </fileset>
                     <fileset>
                        <directory>${basedir}/test-output</directory>
                     </fileset>
                  </filesets>
               </configuration>
            </plugin>

            <!-- just for manuall run using command 'java -jar ${project.build.finalName}.jar' -->
            <plugin>
               <groupId>org.apache.maven.plugins</groupId>
               <artifactId>maven-jar-plugin</artifactId>
               <version>${version.maven.jar.plugin}</version>
               <configuration>
                  <archive>
                     <manifest>
                        <addClasspath>true</addClasspath>
                        <mainClass>io.silverware.microservices.Boot</mainClass>
                        <classpathPrefix>lib/</classpathPrefix>
                     </manifest>
                     <manifestEntries>
                     </manifestEntries>
                  </archive>
               </configuration>
            </plugin>


            <!-- just for manuall run using command 'java -jar ${project.build.finalName}.jar' -->
            <plugin>
               <groupId>org.apache.maven.plugins</groupId>
               <artifactId>maven-dependency-plugin</artifactId>
               <version>${version.maven.dependency.plugin}</version>
               <executions>
                  <execution>
                     <id>copy-dependencies</id>
                     <phase>package</phase>
                     <goals>
                        <goal>copy-dependencies</goal>
                     </goals>
                     <configuration>
                        <outputDirectory>${project.build.directory}/lib</outputDirectory>
                     </configuration>
                  </execution>
               </executions>
            </plugin>
            <plugin>
               <artifactId>maven-surefire-plugin</artifactId>
               <version>${version.maven.surefire}</version>
               <configuration>
                  <forkCount>1</forkCount>
               </configuration>
            </plugin>
         </plugins>
      </pluginManagement>
      <plugins>

         <!-- just for manuall run using command 'java -jar ${project.build.finalName}.jar' -->
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <version>${version.maven.dependency.plugin}</version>
         </plugin>

         <!-- required for manual OpenShift deploy  -->
         <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>fabric8-maven-plugin</artifactId>
            <version>${version.fabric8}</version>
            <executions>
               <execution>
                  <id>json</id>
                  <phase>generate-resources</phase>
                  <goals>
                     <goal>json</goal>
                  </goals>
               </execution>
               <execution>
                  <id>attach</id>
                  <phase>package</phase>
                  <goals>
                     <goal>attach</goal>
                  </goals>
               </execution>
            </executions>
         </plugin>

         <!-- required for s2i openshift build and for manual OpenShift deploy-->
         <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>hawt-app-maven-plugin</artifactId>
            <version>${version.fabric8}</version>
            <executions>
               <execution>
                  <id>hawt-app</id>
                  <goals>
                     <goal>build</goal>
                  </goals>
                  <configuration>
                     <javaMainClass>io.silverware.microservices.Boot</javaMainClass>
                  </configuration>
               </execution>
            </executions>
         </plugin>

         <!-- required for manual OpenShift deploy  -->
         <plugin>
            <groupId>org.jolokia</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${version.maven.jolokia.docker.plugin}</version>
            <configuration>
               <images>
                  <image>
                     <name>${docker.image}</name>
                     <build>
                        <from>${docker.from}</from>
                        <assembly>
                           <basedir>/deployments</basedir>
                           <descriptorRef>hawt-app</descriptorRef>
                        </assembly>
                        <env>
                           <JAVA_LIB_DIR>/deployments/lib</JAVA_LIB_DIR>
                           <JAVA_MAIN_CLASS>io.silverware.microservices.Boot</JAVA_MAIN_CLASS>
                        </env>
                     </build>
                  </image>
               </images>
            </configuration>
         </plugin>

      </plugins>
   </build>


   <!--
   Profiles:

   mvn -Pf8-deploy-image          ... build and push to Docker registry
   mvn -Pf8-deploy-application    ... apply deployment to OpenShift

   For individual goal usage please consult the fabric8 documentation
   -->

   <!--
   Sample usage for manual OpenShift deployment:

   export KUBERNETES_MASTER=https://192.168.122.101:8443
   export KUBERNETES_DOMAIN=example.com
   #DOCKER_HOST should be local docker which you are using
   export DOCKER_HOST=unix:///var/run/docker.sock
   #DOCKER_REGISTRY_OC is address to docker registry accessible from openshift
   export DOCKER_REGISTRY_OC="172.30.184.174:5000"
   #DOCKER_REGISTRY is address to docker registry accessible from local
   export DOCKER_REGISTRY="registry.example.com:80"

   oc login 192.168.122.101:8443

   mvn -Pf8-deploy-image -Ddocker.registry.ext="$DOCKER_REGISTRY" -Ddocker.registry.int="$DOCKER_REGISTRY_OC" -Ddocker.username=$(oc whoami) -Ddocker.password=$(oc whoami -t) -Doc.project=$(oc project -q)
   mvn -Pf8-deploy-application -Ddocker.registry.ext="$DOCKER_REGISTRY" -Ddocker.registry.int="$DOCKER_REGISTRY_OC" -Ddocker.username=$(oc whoami) -Ddocker.password=$(oc whoami -t) -Doc.project=$(oc project -q)

   -->
   <profiles>
      <profile>
         <id>f8-deploy-image</id>
         <properties>
            <docker.registry>${docker.registry.ext}</docker.registry>
            <docker.image>${docker.image.simple}</docker.image>
         </properties>
         <build>
            <defaultGoal>clean install docker:build docker:push</defaultGoal>
         </build>
      </profile>

      <profile>
         <id>f8-deploy-application</id>
         <properties>
            <fabric8.imagePullPolicySnapshot>Always</fabric8.imagePullPolicySnapshot>
            <fabric8.recreate>true</fabric8.recreate>
            <docker.image>${docker.registry.int}/${docker.image.simple}</docker.image>
         </properties>
         <build>
            <defaultGoal>fabric8:json fabric8:apply</defaultGoal>
         </build>
      </profile>
   </profiles>

</project>
